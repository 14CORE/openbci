#!/usr/bin/env python

import numpy, cPickle, os, time, sys, random, settings, time
from array import array
from multiplexer.multiplexer_constants import peers, types
from multiplexer.clients import BaseMultiplexerServer, connect_client


class SpellerLogic(BaseMultiplexerServer):
    
    # states:
    # 1: 
    # 2: A B C D E back
    # 3: F G H I J back
    # 4: K L M N O back
    #  
    # 0: drops all messages
  
    def __init__(self, addresses):
        super(SpellerLogic, self).__init__(addresses=addresses, type=peers.LOGIC)
        self.state = 1
        self.screens = 10
        self.menu = self.screens * ['']
        self.menu[0] = "A B C D E; F G H I J;K L M N O;P R S T U;V W X Y Z; say . _"
        self.menu[1] = "A; B; C; D; E; back"
        self.menu[2] = "F; G; H; I; J; back"
        self.menu[3] = "K; L; M; N; O; back"
        self.menu[4] = "P; R; S; T; U; back"
        self.menu[5] = "V; W; X; Y; Z; back"
        self.message = ""
        men = 10 * [0]
        men[1] = ['A', 'B', 'C', 'D', 'E', 'back']
        men[2] = ['F', 'G', 'H', 'I', 'J', 'back']
        men[3] = ['K', 'L', 'M', 'N', 'O', 'back']
        men[4] = ['P', 'R', 'S', 'T', 'U', 'back']
        men[5] = ['V', 'W', 'X', 'Y', 'Z', 'back']



    def handle_message(self, mxmsg):
        if mxmsg.type == types.DECISION_MESSAGE:
            print "decision", mxmsg.message
            if self.state == 1:
                self.conn.send_message(message = cPickle.dumps(["Panel", self.menu[int(mxmsg.message) + 1]]), type = types.DICT_SET_MESSAGE, timeout = 0.5)
                state = int(mxmsg.message)	
            elif self.state != 0:
                if int(mxmsg.message) > 0 and int(mxmsg.message) < 6:
                    self.message = self.message + men[self.state - 1][int(mxmsg.message)]
                    self.conn.send_message(message = cPickle.dumps(["Message", self.message]), type = types.DICT_SET_MESSAGE, timeout = 0.1)
                elif int(mxmsg.message) == 0:
                    self.message = self.message[:len(self.message) - 1]				
                    self.conn.send_message(message = cPickle.dumps(["Message", self.message]), type = types.DICT_SET_MESSAGE, timeout = 0.1)
                elif int(mxmsg.message) == 6:
                    self.state = 1
                    self.conn.send_message(message = cPickle.dumps(["Panel", self.menu[0]]), type = types.DICT_SET_MESSAGE, timeout = 0.1)
        self.no_response() 

if __name__ == "__main__":
        SpellerLogic(settings.MULTIPLEXER_ADDRESSES).loop()
 
